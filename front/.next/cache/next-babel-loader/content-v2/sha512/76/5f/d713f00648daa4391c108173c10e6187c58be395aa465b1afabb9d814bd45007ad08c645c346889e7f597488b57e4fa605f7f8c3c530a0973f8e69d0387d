{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/luisfelipe/Desktop/Projetos/ML-FRONT/front/src/context/loadingContext.tsx\";\nimport React, { useState, createContext } from 'react';\nconst LoadingContext = /*#__PURE__*/createContext({});\n\nconst LoadingProvider = ({\n  children,\n  Component\n}) => {\n  const loadingState = useState(false);\n  const focusState = useState(false);\n  const ValueState = useState('');\n  const productsState = useState([]);\n  const {\n    0: suggestionsSearch,\n    1: setSuggestionsSearch\n  } = useState([]);\n  const {\n    0: breadcrumb,\n    1: setBreadcrumb\n  } = useState([]);\n  const [loading] = loadingState;\n  const [focus] = focusState;\n  const [valueSearch] = ValueState;\n  const [products] = productsState;\n  return /*#__PURE__*/_jsxDEV(LoadingContext.Provider, {\n    value: {\n      loadingState,\n      focus,\n      focusState,\n      valueSearch,\n      ValueState,\n      suggestionsSearch,\n      setSuggestionsSearch,\n      products,\n      productsState,\n      breadcrumb,\n      setBreadcrumb\n    },\n    children: [/*#__PURE__*/_jsxDEV(Component, {\n      loading: !!loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\nexport { LoadingContext, LoadingProvider };","map":{"version":3,"sources":["/Users/luisfelipe/Desktop/Projetos/ML-FRONT/front/src/context/loadingContext.tsx"],"names":["React","useState","createContext","LoadingContext","LoadingProvider","children","Component","loadingState","focusState","ValueState","productsState","suggestionsSearch","setSuggestionsSearch","breadcrumb","setBreadcrumb","loading","focus","valueSearch","products"],"mappings":";;AAAA,OAAOA,KAAP,IACEC,QADF,EAEEC,aAFF,QAKO,OALP;AA6BA,MAAMC,cAAc,gBAAGD,aAAa,CAAC,EAAD,CAApC;;AAEA,MAAME,eAA+C,GAAG,CAAC;AACvDC,EAAAA,QADuD;AAEvDC,EAAAA;AAFuD,CAAD,KAGlD;AACJ,QAAMC,YAAY,GAAGN,QAAQ,CAAC,KAAD,CAA7B;AACA,QAAMO,UAAU,GAAGP,QAAQ,CAAC,KAAD,CAA3B;AACA,QAAMQ,UAAU,GAAGR,QAAQ,CAAS,EAAT,CAA3B;AACA,QAAMS,aAAa,GAAGT,QAAQ,CAAW,EAAX,CAA9B;AACA,QAAM;AAAA,OAACU,iBAAD;AAAA,OAAoBC;AAApB,MAA4CX,QAAQ,CAAW,EAAX,CAA1D;AACA,QAAM;AAAA,OAACY,UAAD;AAAA,OAAaC;AAAb,MAA8Bb,QAAQ,CAAW,EAAX,CAA5C;AAEA,QAAM,CAACc,OAAD,IAAYR,YAAlB;AACA,QAAM,CAACS,KAAD,IAAUR,UAAhB;AACA,QAAM,CAACS,WAAD,IAAgBR,UAAtB;AACA,QAAM,CAACS,QAAD,IAAaR,aAAnB;AAEA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AACE,IAAA,KAAK,EAAE;AACLH,MAAAA,YADK;AAELS,MAAAA,KAFK;AAGLR,MAAAA,UAHK;AAILS,MAAAA,WAJK;AAKLR,MAAAA,UALK;AAMLE,MAAAA,iBANK;AAOLC,MAAAA,oBAPK;AAQLM,MAAAA,QARK;AASLR,MAAAA,aATK;AAULG,MAAAA,UAVK;AAWLC,MAAAA;AAXK,KADT;AAAA,4BAeE,QAAC,SAAD;AAAW,MAAA,OAAO,EAAE,CAAC,CAACC;AAAtB;AAAA;AAAA;AAAA;AAAA,YAfF,EAgBGV,QAhBH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CApCD;;AAsCA,SAASF,cAAT,EAAyBC,eAAzB","sourcesContent":["import React, {\n  useState,\n  createContext,\n  Dispatch,\n  SetStateAction,\n} from 'react';\n\ninterface LoadingComponentProps {\n  loading: boolean;\n}\n\ninterface LoadingProviderProps {\n  Component: React.FC<LoadingComponentProps>;\n}\n\ninterface LoadingProviderData {\n  loadingState: [boolean, Dispatch<SetStateAction<boolean>>];\n  focus: boolean;\n  focusState: [boolean, Dispatch<SetStateAction<boolean>>];\n  valueSearch: string;\n  ValueState: [string, Dispatch<SetStateAction<string>>];\n  products: Array<string>;\n  productsState: [string[], Dispatch<SetStateAction<string[]>>];\n  suggestionsSearch: string[];\n  setSuggestionsSearch: Dispatch<SetStateAction<string[]>>;\n  breadcrumb: string[];\n  setBreadcrumb: Dispatch<SetStateAction<string[]>>;\n}\n\nconst LoadingContext = createContext({} as LoadingProviderData);\n\nconst LoadingProvider: React.FC<LoadingProviderProps> = ({\n  children,\n  Component,\n}) => {\n  const loadingState = useState(false);\n  const focusState = useState(false);\n  const ValueState = useState<string>('');\n  const productsState = useState<string[]>([]);\n  const [suggestionsSearch, setSuggestionsSearch] = useState<string[]>([]);\n  const [breadcrumb, setBreadcrumb] = useState<string[]>([]);\n\n  const [loading] = loadingState;\n  const [focus] = focusState;\n  const [valueSearch] = ValueState;\n  const [products] = productsState;\n\n  return (\n    <LoadingContext.Provider\n      value={{\n        loadingState,\n        focus,\n        focusState,\n        valueSearch,\n        ValueState,\n        suggestionsSearch,\n        setSuggestionsSearch,\n        products,\n        productsState,\n        breadcrumb,\n        setBreadcrumb,\n      }}\n    >\n      <Component loading={!!loading} />\n      {children}\n    </LoadingContext.Provider>\n  );\n};\n\nexport { LoadingContext, LoadingProvider };\n"]},"metadata":{},"sourceType":"module"}